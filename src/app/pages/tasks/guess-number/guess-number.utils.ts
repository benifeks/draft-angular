export const generateSecretNumber = (): number =>
  Math.floor(Math.random() * 100) + 1;

export const handleGuess = (
  guess: string,
  secret: number,
  attempts: number,
  setAttempts: (v: number) => void,
  setResult: (v: string) => void,
  setGameOver: (v: boolean) => void
) => {
  const num = Number(guess);

  if (!num || num < 1 || num > 100) {
    setResult('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100');
    return;
  }

  const remaining = attempts - 1;
  setAttempts(remaining); // ‚Üê –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º

  if (num === secret) {
    setResult('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
    setGameOver(true);
    return;
  }

  if (remaining === 0) {
    setResult(`üíÄ –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —á–∏—Å–ª–æ: ${secret}`);
    setGameOver(true);
  } else {
    const hint = num < secret ? 'üìâ –ë–æ–ª—å—à–µ' : 'üìà –ú–µ–Ω—å—à–µ';
    setResult(`${hint}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`);
  }
};

export const resetGame = (
  setGuess: (v: string) => void,
  setResult: (v: string) => void,
  setSecret: (v: number) => void,
  setAttempts: (v: number) => void,
  setGameOver: (v: boolean) => void
) => {
  setGuess('');
  setResult('');
  setSecret(generateSecretNumber());
  setAttempts(5);
  setGameOver(false);
};
