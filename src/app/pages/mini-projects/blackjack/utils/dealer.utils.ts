import { take } from 'rxjs';

import { DeckService } from '../services/deck.service';
import { GameStateService } from '../services/game-state.service';

import { calculateScore } from './score.utils';

/**
 * –î–æ–±–æ—Ä –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–æ–º –¥–æ 17 –æ—á–∫–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
 * @param deckService –°–µ—Ä–≤–∏—Å API –∫–æ–ª–æ–¥—ã
 * @param gameStateService –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param deckId ID —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥—ã
 * @param onComplete –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export function dealerDrawUntil17(
  deckService: DeckService,
  gameStateService: GameStateService,
  deckId: string,
  onComplete?: () => void
): void {
  // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –∏–∑ Observable
  gameStateService.dealerCards$.pipe(take(1)).subscribe((initialCards) => {
    // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç (—á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π)
    const dealerCards = [...initialCards];
    let dealerScore = calculateScore(dealerCards);

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã.
     * –ï—Å–ª–∏ —É –¥–∏–ª–µ—Ä–∞ < 17 –æ—á–∫–æ–≤ ‚Äî —Ç—è–Ω–µ–º –µ—â—ë –∫–∞—Ä—Ç—É.
     * –ò–Ω–∞—á–µ ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     */
    const drawNext = () => {
      if (dealerScore >= 17) {
        // ‚úÖ –û—á–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameStateService.setDealerCards(dealerCards);
        gameStateService.setDealerScore(dealerScore);
        onComplete?.(); // –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        return;
      }

      // üéØ –í—ã—Ç—è–≥–∏–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
      deckService.drawCards(deckId, 1).subscribe({
        next: ([newCard]) => {
          dealerCards.push(newCard); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä—É–∫—É
          dealerScore = calculateScore(dealerCards); // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
          drawNext(); // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–æ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        },
        error: (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–æ–º:', err);
        },
      });
    };

    drawNext(); // –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–æ—Ä
  });
}
