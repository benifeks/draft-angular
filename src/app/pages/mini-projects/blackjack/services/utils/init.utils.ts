import { Card } from '../deck.service';
import { GameStateService } from '../game-state.service';

import { calculateScore } from './score.utils';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–∏:
 * - 2 –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
 * - 2 –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä—É
 * - –ø–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
 * - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function initializeHands(
  cards: Card[],
  gameStateService: GameStateService
): {
  playerCards: Card[];
  dealerCards: Card[];
  playerScore: number;
  dealerScore: number;
  hideDealerScore: boolean;
} {
  if (cards.length < 4) {
    throw new Error(
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4)'
    );
  }

  const playerCards = cards.slice(0, 2);
  const dealerCards = cards.slice(2, 4);

  const playerScore = calculateScore(playerCards);
  const dealerScore = calculateScore(dealerCards);

  // —Å–∫—Ä—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
  gameStateService.setHideDealerCard(true);

  // üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  evaluateInitialResult(playerScore, dealerScore, gameStateService);

  // üöÄ –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log('üßÆ –û—á–∫–∏ –∏–≥—Ä–æ–∫–∞:', playerScore);
  console.log('üßÆ –û—á–∫–∏ –¥–∏–ª–µ—Ä–∞ (–æ–±–∞):', dealerScore);

  return {
    playerCards,
    dealerCards,
    playerScore,
    dealerScore,
    hideDealerScore: true, // –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
function evaluateInitialResult(
  playerScore: number,
  dealerScore: number,
  gameStateService: GameStateService
): void {
  gameStateService.setCanDrawCard(false);
  gameStateService.setCanPass(false);
  gameStateService.setCanStartGame(true);
  gameStateService.setHideDealerCard(false);
  gameStateService.setHideDealerScore(false);

  if (playerScore === 21 && dealerScore === 21) {
    gameStateService.setGameResult('ü§ù –ù–∏—á—å—è');

    return;
  }
  if (playerScore === 21) {
    gameStateService.setGameResult('üéâ –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ - 21(blackjack)');

    return;
  }
  if (dealerScore === 21) {
    gameStateService.setGameResult('üíº –ü–æ–±–µ–¥–∞ –¥–∏–ª–µ—Ä–∞ - 21(blackjack)');

    return;
  }
  // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
  gameStateService.setHideDealerCard(true);
  gameStateService.setHideDealerScore(true);
  gameStateService.setGameResult('üé≤ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è');
  gameStateService.setCanStartGame(false);
  gameStateService.setCanDrawCard(true);
  gameStateService.setCanPass(true);
}
