import { take } from 'rxjs/operators';

import { DeckService } from '../deck.service';
import { GameStateService } from '../game-state.service';

import { finalizeGameState } from './finalize.utils';
import { calculateScore } from './score.utils';

/**
 * üí≥ –î–æ–±–æ—Ä –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–º:
 * - –ë–µ—Ä—ë—Ç 1 –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—ã –∏ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–±–æ—Ä / 21 / –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 *
 * @param deckId ID —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥—ã
 * @param deckService –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–¥–æ–π
 * @param gameStateService –°–µ—Ä–≤–∏—Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 */
export function drawCard(
  deckService: DeckService,
  gameStateService: GameStateService,
  deckId: string
): void {
  deckService.drawCards(deckId, 1).subscribe({
    next: ([newCard]) => {
      // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ observable (—Ä–∞–∑–æ–≤—ã–π —Å–Ω–∏–º–æ–∫)
      gameStateService.playerCards$.pipe(take(1)).subscribe((currentCards) => {
        const updatedCards = [...currentCards, newCard];

        const newScore = calculateScore(updatedCards);

        // üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        gameStateService.setPlayerCards(updatedCards);
        gameStateService.setPlayerScore(newScore);

        if (newScore > 21) {
          gameStateService.setGameResult('üí• –ü–µ—Ä–µ–±–æ—Ä! –ü–æ–±–µ–¥–∞ –¥–∏–ª–µ—Ä–∞');
          finalizeGameState(gameStateService);
          return;
        }
        if (newScore === 21) {
          gameStateService.setCanDrawCard(false);
          gameStateService.setGameResult('üü° –£ –≤–∞—Å 21 ‚Äî –ø–æ—Ä–∞ –Ω–∞–∂–∞—Ç—å "–ü–∞—Å"');
          return;
        }
        gameStateService.setCanDrawCard(true);
        gameStateService.setCanPass(true);
        gameStateService.setCanStartGame(false);
      });
    },
    error: (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç—ã:', err);
    },
  });
}
