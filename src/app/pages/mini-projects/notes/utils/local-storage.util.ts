import {
  effect,
  EnvironmentInjector,
  runInInjectionContext,
  WritableSignal,
} from '@angular/core';

import {
  calculateLocalStorageUsage,
  localStorageUsage,
} from '../../../../shared/dev/local-storage-kit/storage-usage.signal';

export function syncSignalWithLocalStorage<T>(
  key: string,
  signal: WritableSignal<T>,
  injector: EnvironmentInjector
): void {
  // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
  const raw = localStorage.getItem(key);
  if (raw !== null) {
    try {
      const parsed = JSON.parse(raw) as T;
      signal.set(parsed);
    } catch {
      console.warn(`‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É ${key}`);
    }
  }

  // 2. –≠—Ñ—Ñ–µ–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  runInInjectionContext(injector, () => {
    effect(() => {
      localStorage.setItem(key, JSON.stringify(signal()));

      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
      localStorageUsage.set(calculateLocalStorageUsage());
    });
  });
}
